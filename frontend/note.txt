When to use Server and Client Components?

Here's a quick summary of the different use cases for Server and Client Components:
What do you need to do?	                                               Server Component	Client Component
Fetch data	                                                                +
Access backend resources (directly)	                                        +
Keep sensitive information on the server (access tokens, API keys, etc)	    +
Keep large dependencies on the server / Reduce client-side JavaScript	    +
Add interactivity and event listeners (onClick(), onChange(), etc)	                            +
Use State and Lifecycle Effects (useState(), useReducer(), useEffect(), etc)	                +
Use browser-only APIs	                                                                        +
Use custom hooks that depend on state, effects, or browser-only APIs	                        +
Use React Class components                                                                      +


--  You cannot import a Server Component into a Client Component:
    'use client'
 
    // You cannot import a Server Component into a Client Component.
    import ServerComponent from './Server-Component'
    
    export default function ClientComponent({ children }) {
    const [count, setCount] = useState(0)
    
    return (
        <>
        <button onClick={() => setCount(count + 1)}>{count}</button>
    
        <ServerComponent />
        </>
    )
    }
--

-- The following pattern is supported. You can pass Server Components as a prop to a Client Component.

A common pattern is to use the React children prop to create a "slot" in your Client Component.

In the example below, <ClientComponent> accepts a children prop:
    'use client'
 
    import { useState } from 'react'
    
    export default function ClientComponent({ children }) {
    const [count, setCount] = useState(0)
    
    return (
        <>
        <button onClick={() => setCount(count + 1)}>{count}</button>
    
        {children}
        </>
    )
    }
<ClientComponent> doesn't know that children will eventually be filled in by the result of a Server Component.
The only responsibility <ClientComponent> has is to decide where children will eventually be placed.
In a parent Server Component, you can import both the <ClientComponent> and <ServerComponent>
and pass <ServerComponent> as a child of <ClientComponent>:
    // This pattern works:
    // You can pass a Server Component as a child or prop of a
    // Client Component.
    import ClientComponent from './client-component'
    import ServerComponent from './server-component'
    
    // Pages in Next.js are Server Components by default
    export default function Page() {
    return (
        <ClientComponent>
        <ServerComponent />
        </ClientComponent>
    )
    }
--
